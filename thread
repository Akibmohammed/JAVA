import java.util.Random;

class SharedResources {
    private int randomNumber;
    private boolean isNumberGenerated;

    synchronized void setRandomNo(int number) {
        while (isNumberGenerated) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        randomNumber = number;
        isNumberGenerated = true;
        notify();
    }

    synchronized int getRandomNo() {
        while (!isNumberGenerated) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        isNumberGenerated = false;
        notify();
        return randomNumber;
    }
}

class GetRandomNumber implements Runnable {
    private SharedResources sharedResources;

    GetRandomNumber(SharedResources sharedResources) {
        this.sharedResources = sharedResources;
    }

    public void run() {
        Random random = new Random();

        while (true) {
            int number = random.nextInt(100) + 1;
            sharedResources.setRandomNo(number);

            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}

class PrimeNo implements Runnable {
    private SharedResources sharedResources;

    PrimeNo(SharedResources sharedResources) {
        this.sharedResources = sharedResources;
    }

    public void run() {
        while (true) {
            int number = sharedResources.getRandomNo();
            boolean isPrime = isPrime(number);

            System.out.println("Thread 2: Number " + number + " is " + (isPrime ? "prime" : "not prime"));
        }
    }

    private boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}

class Factorial implements Runnable {
    private SharedResources sharedResources;

    Factorial(SharedResources sharedResources) {
        this.sharedResources = sharedResources;
    }

    public void run() {
        while (true) {
            int number = sharedResources.getRandomNo();
            int fact = calculateFactorial(number);

            System.out.println("Thread 3: Factorial of " + number + " is " + fact);
        }
    }

    private int calculateFactorial(int n) {
        if (n == 1 || n == 0) {
            return 1;
        } else {
            return n * calculateFactorial(n - 1);
        }
    }
}

public class ThreeThreadProgram {
    public static void main(String[] args) {
        SharedResources sharedResources = new SharedResources();

        Thread thread1 = new Thread(new GetRandomNumber(sharedResources));
        Thread thread2 = new Thread(new PrimeNo(sharedResources));
        Thread thread3 = new Thread(new Factorial(sharedResources));

        thread1.start();
        thread2.start();
        thread3.start();
    }
}
